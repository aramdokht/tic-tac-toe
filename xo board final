void setup() {
    Serial.begin(9600);
    pinMode(A14, OUTPUT);
    pinMode(A15, OUTPUT);
    pinMode(2, OUTPUT);
    pinMode(3, OUTPUT);
    pinMode(4, OUTPUT);
    pinMode(5, OUTPUT);
    pinMode(6, OUTPUT);
    pinMode(7, OUTPUT);
    pinMode(8, OUTPUT);
    pinMode(9, OUTPUT);
    pinMode(10, OUTPUT);
    pinMode(11, OUTPUT);
    pinMode(12, OUTPUT);
    pinMode(13, OUTPUT);
    pinMode(14, OUTPUT);
    pinMode(15, OUTPUT);
    pinMode(16, OUTPUT);
    pinMode(17, OUTPUT);
    pinMode(18, OUTPUT);
    pinMode(19, OUTPUT);
    pinMode(20, OUTPUT);
    pinMode(21, OUTPUT);
    pinMode(22, OUTPUT);
    pinMode(23, OUTPUT);
    pinMode(24, OUTPUT);
    pinMode(25, OUTPUT);
    pinMode(26, OUTPUT);
    pinMode(27, OUTPUT);
    pinMode(28, OUTPUT);
    pinMode(29, OUTPUT);
    pinMode(30, OUTPUT);
    pinMode(31, OUTPUT);
    pinMode(32, OUTPUT);
    pinMode(33, OUTPUT);
    pinMode(34, OUTPUT);
    pinMode(35, OUTPUT);
    pinMode(36, OUTPUT);
    pinMode(37, OUTPUT);
    pinMode(38, OUTPUT);
    pinMode(39, OUTPUT);
    pinMode(40, OUTPUT);
    pinMode(41, OUTPUT);
    pinMode(42, OUTPUT);
    pinMode(43, OUTPUT);
    pinMode(44, OUTPUT);
    pinMode(45, OUTPUT);
    pinMode(46, OUTPUT);
    pinMode(47, OUTPUT);
    pinMode(48, OUTPUT);
    pinMode(49, OUTPUT);
    pinMode(50, OUTPUT);
    pinMode(51, OUTPUT);
    pinMode(52, OUTPUT);
    pinMode(53, OUTPUT);
    pinMode(A0, INPUT_PULLUP);
    pinMode(A1, INPUT_PULLUP);
    pinMode(A2, INPUT_PULLUP);
    pinMode(A3, INPUT_PULLUP);
    pinMode(A4, INPUT_PULLUP);
    pinMode(A5, INPUT_PULLUP);
    pinMode(A6, INPUT_PULLUP);
}

void clearA1(){
    digitalWrite(13, LOW);
    digitalWrite(12, LOW);
    digitalWrite(11, LOW);
    digitalWrite(10, LOW);
    digitalWrite(9, LOW);
    digitalWrite(8, LOW);  
}

void clearA2(){
    digitalWrite(7, LOW);
    digitalWrite(6, LOW);
    digitalWrite(5, LOW);
    digitalWrite(4, LOW);
    digitalWrite(3, LOW);
    digitalWrite(2, LOW);
}

void clearA3(){
    digitalWrite(A14, LOW);
    digitalWrite(A15, LOW);
    digitalWrite(14, LOW);
    digitalWrite(15, LOW);
    digitalWrite(16, LOW);
    digitalWrite(17, LOW);
}

void clearB1(){
    digitalWrite(18, LOW);
    digitalWrite(19, LOW);
    digitalWrite(20, LOW);
    digitalWrite(21, LOW);
    digitalWrite(22, LOW);
    digitalWrite(23, LOW);
}

void clearB2(){
    digitalWrite(35, LOW);
    digitalWrite(34, LOW);
    digitalWrite(33, LOW);
    digitalWrite(32, LOW);
    digitalWrite(31, LOW);
    digitalWrite(30, LOW);
}

void clearB3(){
    digitalWrite(29, LOW);
    digitalWrite(28, LOW);
    digitalWrite(27, LOW);
    digitalWrite(26, LOW);
    digitalWrite(25, LOW);
    digitalWrite(24, LOW);
}

void clearC1(){
    digitalWrite(53, LOW);
    digitalWrite(52, LOW);
    digitalWrite(51, LOW);
    digitalWrite(50, LOW);
    digitalWrite(49, LOW);
    digitalWrite(48, LOW);
}

void clearC2(){
    digitalWrite(47, LOW);
    digitalWrite(46, LOW);
    digitalWrite(45, LOW);
    digitalWrite(44, LOW);
    digitalWrite(43, LOW);
    digitalWrite(42, LOW);
}

void clearC3(){
    digitalWrite(41, LOW);
    digitalWrite(40, LOW);
    digitalWrite(39, LOW);
    digitalWrite(38, LOW);
    digitalWrite(37, LOW);
    digitalWrite(36, LOW);
}

void a1x() {
    digitalWrite(13, HIGH);
    digitalWrite(12, LOW);
    digitalWrite(11, HIGH);
    digitalWrite(10, LOW);
    digitalWrite(9, HIGH);
    digitalWrite(8, LOW);
}

void a1o() {
    digitalWrite(13, LOW);
    digitalWrite(12, HIGH);
    digitalWrite(11, LOW);
    digitalWrite(10, HIGH);
    digitalWrite(9, LOW);
    digitalWrite(8, HIGH);
}

void a2x() {
    digitalWrite(7, HIGH);
    digitalWrite(6, LOW);
    digitalWrite(5, HIGH);
    digitalWrite(4, LOW);
    digitalWrite(3, HIGH);
    digitalWrite(2, LOW);
}

void a2o() {
    digitalWrite(7, LOW);
    digitalWrite(6, HIGH);
    digitalWrite(5, LOW);
    digitalWrite(4, HIGH);
    digitalWrite(3, LOW);
    digitalWrite(2, HIGH);
}

void a3x() {
    digitalWrite(A14, HIGH);
    digitalWrite(A15, LOW);
    digitalWrite(14, HIGH);
    digitalWrite(15, LOW);
    digitalWrite(16, HIGH);
    digitalWrite(17, LOW);
}

void a3o() {
    digitalWrite(A14, LOW);
    digitalWrite(A15, HIGH);
    digitalWrite(14, LOW);
    digitalWrite(15, HIGH);
    digitalWrite(16, LOW);
    digitalWrite(17, HIGH);
}

void b1x() {
    digitalWrite(18, HIGH);
    digitalWrite(19, LOW);
    digitalWrite(20, HIGH);
    digitalWrite(21, LOW);
    digitalWrite(22, HIGH);
    digitalWrite(23, LOW);
}

void b1o() {
    digitalWrite(18, LOW);
    digitalWrite(19, HIGH);
    digitalWrite(20, LOW);
    digitalWrite(21, HIGH);
    digitalWrite(22, LOW);
    digitalWrite(23, HIGH);
}

void b2x() {
    digitalWrite(35, HIGH);
    digitalWrite(34, LOW);
    digitalWrite(33, HIGH);
    digitalWrite(32, LOW);
    digitalWrite(31, HIGH);
    digitalWrite(30, LOW);
}

void b2o() {
    digitalWrite(35, LOW);
    digitalWrite(34, HIGH);
    digitalWrite(33, LOW);
    digitalWrite(32, HIGH);
    digitalWrite(31, LOW);
    digitalWrite(30, HIGH);
}

void b3x() {
    digitalWrite(29, HIGH);
    digitalWrite(28, LOW);
    digitalWrite(27, HIGH);
    digitalWrite(26, LOW);
    digitalWrite(25, HIGH);
    digitalWrite(24, LOW);
}

void b3o() {
    digitalWrite(29, LOW);
    digitalWrite(28, HIGH);
    digitalWrite(27, LOW);
    digitalWrite(26, HIGH);
    digitalWrite(25, LOW);
    digitalWrite(24, HIGH);
}

void c1x() {
    digitalWrite(53, HIGH);
    digitalWrite(52, LOW);
    digitalWrite(51, HIGH);
    digitalWrite(50, LOW);
    digitalWrite(49, HIGH);
    digitalWrite(48, LOW);
}

void c1o() {
    digitalWrite(53, LOW);
    digitalWrite(52, HIGH);
    digitalWrite(51, LOW);
    digitalWrite(50, HIGH);
    digitalWrite(49, LOW);
    digitalWrite(48, HIGH);
}

void c2x() {
    digitalWrite(47, HIGH);
    digitalWrite(46, LOW);
    digitalWrite(45, HIGH);
    digitalWrite(44, LOW);
    digitalWrite(43, HIGH);
    digitalWrite(42, LOW);
}

void c2o() {
    digitalWrite(47, LOW);
    digitalWrite(46, HIGH);
    digitalWrite(45, LOW);
    digitalWrite(44, HIGH);
    digitalWrite(43, LOW);
    digitalWrite(42, HIGH);
}

void c3x() {
    digitalWrite(41, HIGH);
    digitalWrite(40, LOW);
    digitalWrite(39, HIGH);
    digitalWrite(38, LOW);
    digitalWrite(37, HIGH);
    digitalWrite(36, LOW);
}

void c3o() {
    digitalWrite(41, LOW);
    digitalWrite(40, HIGH);
    digitalWrite(39, LOW);
    digitalWrite(38, HIGH);
    digitalWrite(37, LOW);
    digitalWrite(36, HIGH);
}

void clearDisplay() {
    digitalWrite(0, LOW);
    digitalWrite(1, LOW);
    digitalWrite(2, LOW);
    digitalWrite(3, LOW);
    digitalWrite(4, LOW);
    digitalWrite(5, LOW);
    digitalWrite(6, LOW);
    digitalWrite(7, LOW);
    digitalWrite(8, LOW);
    digitalWrite(9, LOW);
    digitalWrite(10, LOW);
    digitalWrite(11, LOW);
    digitalWrite(12, LOW);
    digitalWrite(13, LOW);
    digitalWrite(14, LOW);
    digitalWrite(15, LOW);
    digitalWrite(16, LOW);
    digitalWrite(17, LOW);
    digitalWrite(18, LOW);
    digitalWrite(19, LOW);
    digitalWrite(20, LOW);
    digitalWrite(21, LOW);
    digitalWrite(22, LOW);
    digitalWrite(23, LOW);
    digitalWrite(24, LOW);
    digitalWrite(25, LOW);
    digitalWrite(26, LOW);
    digitalWrite(27, LOW);
    digitalWrite(28, LOW);
    digitalWrite(29, LOW);
    digitalWrite(30, LOW);
    digitalWrite(31, LOW);
    digitalWrite(32, LOW);
    digitalWrite(33, LOW);
    digitalWrite(34, LOW);
    digitalWrite(35, LOW);
    digitalWrite(36, LOW);
    digitalWrite(37, LOW);
    digitalWrite(38, LOW);
    digitalWrite(39, LOW);
    digitalWrite(40, LOW);
    digitalWrite(41, LOW);
    digitalWrite(42, LOW);
    digitalWrite(43, LOW);
    digitalWrite(44, LOW);
    digitalWrite(45, LOW);
    digitalWrite(46, LOW);
    digitalWrite(47, LOW);
    digitalWrite(48, LOW);
    digitalWrite(49, LOW);
    digitalWrite(50, LOW);
    digitalWrite(51, LOW);
    digitalWrite(52, LOW);
    digitalWrite(53, LOW);

}

void refresher(int param[]) {
    for (int i = 0; i < 9; i++) {
        if (param[i] == '1') {
            switch (i) {
                case 0:
                    a1x();
                    break;
                case 1:
                    a2x();
                    break;
                case 2:
                    a3x();
                    break;
                case 3:
                    b1x();
                    break;
                case 4:
                    b2x();
                    break;
                case 5:
                    b3x();
                    break;
                case 6:
                    c1x();
                    break;
                case 7:
                    c2x();
                    break;
                case 8:
                    c3x();
                    break;
            }
        } else if (param[i] == '2') {
            switch (i) {
                case 0:
                    a1o();
                    break;
                case 1:
                    a2o();
                    break;
                case 2:
                    a3o();
                    break;
                case 3:
                    b1o();
                    break;
                case 4:
                    b2o();
                    break;
                case 5:
                    b3o();
                    break;
                case 6:
                    c1o();
                    break;
                case 7:
                    c2o();
                    break;
                case 8:
                    c3o();
                    break;
            }
        }
    }
}

void endGame(int index, int display[]){
  bool end = false;
  int move = display[index];
  switch (index){
    case 0:
      Serial.print("switch");
      if ( (display[1] == move &&
            display[2] == move) ||
            (display[3] == move &&
             display[6] == move) ||
             (display[4] == move &&
              display[8] == move)){
               Serial.print("win");
               end = true;
               }
      break;      
    case 1:
      if ( (display[0] == move &&
            display[2] == move) ||
            (display[4] == move &&
             display[7] == move)){
               end = true;
               }

      break;
    case 2:
      if ( (display[0] == move &&
            display[1] == move) ||
            (display[5] == move &&
             display[8] == move) ||
             (display[5] == move &&
              display[6] == move)){
               end = true;
               }

      break;
    case 3:
      if ( (display[4] == move &&
            display[5] == move) ||
            (display[0] == move &&
             display[6] == move)){
               end = true;
               }

      break;
    case 4:
      if ( (display[1] == move &&
            display[7] == move) ||
            (display[3] == move &&
             display[5] == move) ||
             (display[0] == move &&
              display[8] == move) ||
              (display[2] == move &&
               display[6] == move)){
               end = true;
               }
      break;
    case 5:
      if ( (display[8] == move &&
            display[2] == move) ||
            (display[4] == move &&
             display[3] == move)){
               end = true;
               }

      break;
    case 6:
      if ( (display[0] == move &&
            display[3] == move) ||
            (display[8] == move &&
             display[7] == move) ||
             (display[4] == move &&
              display[2] == move)){
               end = true;
               }

      break;
    case 7:
      if ( (display[1] == move &&
            display[4] == move) ||
            (display[6] == move &&
             display[8] == move)){
               end = true;
               }

      break;
    case 8:
      if ( (display[5] == move &&
            display[2] == move) ||
            (display[4] == move &&
             display[0] == move) ||
             (display[6] == move &&
              display[7] == move)){
               end = true;
               }

      break;
  }
  if (end){
    while (end){
      clearDisplay();
      delay(500);
      refresher(display);
      delay(500);
    }
   }
}

void loop() {

    clearDisplay;
    int display[9];
    int player = 1; // player = 1, player = 2 for respective
    for (int i = 0; i < 9; i++) { // files the display array with 0
        display[i] = '0';
    }

    bool outer_condition = true;
    int row_index[3];
    int column_index = 0;
    int row = 0;
    int column = 0;
    while (outer_condition) {
            bool condition = true;
            while (condition) {
                if (digitalRead(A1) == HIGH || digitalRead(A2) == HIGH || digitalRead(A3) == HIGH) { // checks for row input
                    row = 1;
                    if (digitalRead(A1) == HIGH) {
                        row_index[0] = 0;
                        row_index[1] = 1;
                        row_index[2] = 2;
                    } else if (digitalRead(A2) == HIGH) {
                        row_index[0] = 3;
                        row_index[1] = 4;
                        row_index[2] = 5;
                    } else if (digitalRead(A3) == HIGH) {
                        row_index[0] = 6;
                        row_index[1] = 7;
                        row_index[2] = 8;
                    }
                } else{
                  row = 0;
                }
                if (digitalRead(A4) == HIGH || digitalRead(A5) == HIGH || digitalRead(A6) == HIGH) { // checks for column input
                    column = 1;
                    if (digitalRead(A4) == HIGH) {
                        column_index = 0;
                    } else if (digitalRead(A5) == HIGH) {
                        column_index = 1;
                    } else if (digitalRead(A6) == HIGH) {
                        column_index = 2;
                    }
                } else{
                  column = 0;
                }
                if (row == 1 && column == 1) {
                    condition = false;
                }
            }
            int index = row_index[column_index];
            if (display[index] == '0') { // to stop overwritting squares
                if (player == 1) {
                    display[index] = '1'; // player1 = 101010, player2 = 010101
                    refresher(display);
                    player = 2;
                    endGame(index, display);
                } else {
                    display[index] = '2'; // sets the square to turn on with the array. this is for the refersher function to display the thing
                    refresher(display);
                    player = 1;
                    endGame(index, display);
                }
            }
        
    }
}